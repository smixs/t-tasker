"""Callback query handlers for inline keyboards."""

import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery

from src.core.database import get_database
from src.core.exceptions import BotError
from src.models.db import User
from src.repositories.task import TaskRepository
from src.services.todoist_service import TodoistService
from src.utils.formatters import create_recent_tasks_keyboard, format_error_message

logger = logging.getLogger(__name__)

# Create router for callbacks
callback_router = Router(name="callbacks")


@callback_router.callback_query(F.data.startswith("delete_task:"))
async def handle_delete_task(
    callback: CallbackQuery,
    user: "User",
    todoist_token: str
) -> None:
    """Handle delete task callback."""
    # Parse callback data
    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    _, task_id_str, todoist_id = parts
    task_id = int(task_id_str)

    logger.info(f"User {user.id} deleting task {task_id} (todoist: {todoist_id})")

    try:
        # Delete from Todoist
        async with TodoistService(todoist_token) as todoist:
            success = await todoist.delete_task(todoist_id)

            if success:
                # Delete from database
                db = get_database()
                async with db.get_session() as session:
                    task_repo = TaskRepository(session)
                    await task_repo.delete_task_record(task_id)

                # Update message
                if callback.message:
                    await callback.message.edit_text(
                        f"{callback.message.text}\n\n‚ùå <b>–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞</b>",
                        parse_mode="HTML"
                    )

                await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")
            else:
                await callback.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
                    show_alert=True
                )
    except BotError as e:
        logger.warning(f"Bot error deleting task: {e}")
        await callback.answer(format_error_message(e), show_alert=True)
    except Exception as e:
        logger.error(f"Unexpected error deleting task: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", show_alert=True)


@callback_router.callback_query(F.data.startswith("complete_task:"))
async def handle_complete_task(
    callback: CallbackQuery,
    user: "User",
    todoist_token: str
) -> None:
    """Handle complete task callback."""
    # Parse callback data
    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    _, task_id_str, todoist_id = parts
    task_id = int(task_id_str)

    logger.info(f"User {user.id} completing task {task_id} (todoist: {todoist_id})")

    try:
        # Complete in Todoist
        async with TodoistService(todoist_token) as todoist:
            success = await todoist.complete_task(todoist_id)

            if success:
                # Update message
                if callback.message:
                    await callback.message.edit_text(
                        f"{callback.message.text}\n\n‚úÖ <b>–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>",
                        parse_mode="HTML"
                    )

                await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π")
            else:
                await callback.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.",
                    show_alert=True
                )
    except BotError as e:
        logger.warning(f"Bot error completing task: {e}")
        await callback.answer(format_error_message(e), show_alert=True)
    except Exception as e:
        logger.error(f"Unexpected error completing task: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", show_alert=True)


@callback_router.callback_query(F.data.startswith("edit_task:"))
async def handle_edit_task(callback: CallbackQuery) -> None:
    """Handle edit task callback."""
    await callback.answer(
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é.",
        show_alert=True
    )


@callback_router.callback_query(F.data == "refresh_recent_tasks")
async def handle_refresh_recent(
    callback: CallbackQuery,
    user: "User"
) -> None:
    """Handle refresh recent tasks callback."""
    if not callback.message:
        return

    user_id = user.id
    logger.info(f"User {user_id} refreshing recent tasks")

    # Get recent tasks
    db = get_database()
    async with db.get_session() as session:
        task_repo = TaskRepository(session)
        recent_tasks = await task_repo.get_recent_tasks(user_id, limit=5)

        if not recent_tasks:
            await callback.message.edit_text("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
            await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")
            return

        # Format tasks list
        text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏:</b>\n\n"

        for i, task in enumerate(recent_tasks, 1):
            text += (
                f"{i}. <b>{task.task_content}</b>\n"
                f"   üóì {task.task_due or '–ë–µ–∑ —Å—Ä–æ–∫–∞'}\n"
                f"   üè∑ {task.task_labels or '–ë–µ–∑ –º–µ—Ç–æ–∫'}\n\n"
            )

        # Update message with new keyboard
        keyboard = create_recent_tasks_keyboard(recent_tasks)

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")
