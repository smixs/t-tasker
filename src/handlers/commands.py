"""Command handlers for the bot."""

import logging

from aiogram import Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from src.core.database import get_database
from src.core.exceptions import BotError
from src.handlers.states import SetupStates
from src.models.db import User
from src.repositories.task import TaskRepository
from src.repositories.user import UserRepository
from src.services.encryption import get_encryption_service
from src.services.todoist_service import TodoistService
from src.utils.formatters import format_error_message

logger = logging.getLogger(__name__)

# Create router for commands
command_router = Router(name="commands")


@command_router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """Handle /start command."""
    if not message.from_user:
        return

    # Create or update user in database
    async with get_database().get_session() as session:
        user_repo = UserRepository(session)
        await user_repo.create_or_update(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            language_code=message.from_user.language_code
        )

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–¥–∞—á–∏ Todoist.\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ –ò–∑–≤–ª–µ–∫–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç Todoist –∫–æ–º–∞–Ω–¥–æ–π /setup"
    )


@command_router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """Handle /help command."""
    await message.answer(
        "üìñ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:**\n\n"
        "1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Todoist: /setup\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π\n"
        "3. –ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –∑–∞–¥–∞—á—É –≤ Todoist\n\n"
        "**–ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:**\n"
        "‚Ä¢ –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∑–∞–≤—Ç—Ä–∞\n"
        "‚Ä¢ –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ –ø—è—Ç–Ω–∏—Ü—É –≤ 15:00\n"
        "‚Ä¢ –û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç–∞ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞ !–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/setup - –ü–æ–¥–∫–ª—é—á–∏—Ç—å Todoist\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
        "/undo - –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–¥–∞—á—É\n"
        "/recent - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–¥–∞—á\n"
        "/autodelete - –í–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é",
        parse_mode="Markdown"
    )


@command_router.message(Command("setup"))
async def cmd_setup(message: Message, state: FSMContext) -> None:
    """Handle /setup command - start token setup."""
    import os
    from pathlib import Path

    from aiogram.types import FSInputFile

    if not message.from_user:
        return

    # Create or update user in database first
    async with get_database().get_session() as session:
        user_repo = UserRepository(session)
        await user_repo.create_or_update(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            language_code=message.from_user.language_code
        )

    await state.set_state(SetupStates.waiting_for_token)

    # Send instruction image first
    image_path = Path("/app/assets/images/todoist_api_token_guide.png")
    logger.info(f"Looking for image at: {image_path}")
    logger.info(f"Image exists: {image_path.exists()}")
    logger.info(f"Current working directory: {os.getcwd()}")

    if image_path.exists():
        photo = FSInputFile(str(image_path))
        await message.answer_photo(
            photo=photo,
            caption=(
                "üîê **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Todoist**\n\n"
                "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à Personal API Token:\n\n"
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ [Todoist Settings](https://app.todoist.com/app/settings/integrations/developer)\n"
                "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à API token (—Å–º. —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã—à–µ)\n"
                "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n"
                "‚ö†Ô∏è –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ.\n"
                "–ù–∏–∫—Ç–æ –∫—Ä–æ–º–µ –≤–∞—Å –Ω–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø."
            ),
            parse_mode="Markdown"
        )
    else:
        # Fallback to text-only message if image not found
        await message.answer(
            "üîê **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Todoist**\n\n"
            "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à Personal API Token:\n\n"
            "1. –û—Ç–∫—Ä–æ–π—Ç–µ [Todoist Settings](https://app.todoist.com/app/settings/integrations/developer)\n"
            "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à API token\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n"
            "‚ö†Ô∏è –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ.\n"
            "–ù–∏–∫—Ç–æ –∫—Ä–æ–º–µ –≤–∞—Å –Ω–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø.",
            parse_mode="Markdown",
            disable_web_page_preview=True
        )


@command_router.message(SetupStates.waiting_for_token)
async def process_token(message: Message, state: FSMContext) -> None:
    """Process Todoist token."""
    if not message.text or not message.from_user:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —Ç–µ–∫—Å—Ç–æ–º.")
        return

    token = message.text.strip()

    # Basic validation
    if len(token) < 20 or len(token) > 100:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 40 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return

    # Delete message with token for security
    await message.delete()

    # Encrypt and save token
    try:
        encryption = get_encryption_service()
        encrypted_token = encryption.encrypt(token)

        async with get_database().get_session() as session:
            user_repo = UserRepository(session)
            success = await user_repo.update_todoist_token(
                user_id=message.from_user.id,
                encrypted_token=encrypted_token
            )

        if success:
            await message.answer(
                "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è, "
                "–∏ —è –±—É–¥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑ –Ω–∏—Ö –∑–∞–¥–∞—á–∏ –≤ Todoist."
            )
            await state.clear()
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"Failed to save token: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@command_router.message(Command("status"))
async def cmd_status(message: Message) -> None:
    """Check connection status."""
    if not message.from_user:
        return

    async with get_database().get_session() as session:
        user_repo = UserRepository(session)
        user = await user_repo.get_by_id(message.from_user.id)

    if not user or not user.todoist_token_encrypted:
        await message.answer(
            "‚ùå Todoist –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        )
    else:
        await message.answer(
            f"‚úÖ Todoist –ø–æ–¥–∫–ª—é—á–µ–Ω\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: {user.tasks_created}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞: {user.last_task_at.strftime('%d.%m.%Y %H:%M') if user.last_task_at else '–ù–µ—Ç'}"
        )


@command_router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext) -> None:
    """Cancel current operation."""
    current_state = await state.get_state()

    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    else:
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")


@command_router.message(Command("undo"))
async def handle_undo(
    message: Message,
    user: "User",
    todoist_token: str
) -> None:
    """Handle /undo command - delete last created task."""
    if not message.from_user:
        return

    user_id = message.from_user.id
    logger.info(f"User {user_id} requested undo")

    # Get last task from database
    db = get_database()
    async with db.get_session() as session:
        task_repo = TaskRepository(session)
        last_task = await task_repo.get_last_task(user_id)

        if not last_task:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        # Delete from Todoist
        try:
            async with TodoistService(todoist_token) as todoist:
                success = await todoist.delete_task(last_task.todoist_id)

                if success:
                    # Delete from database
                    await task_repo.delete_task_record(last_task.id)

                    await message.answer(
                        f"‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞:\n\n"
                        f"üìù <b>{last_task.task_content}</b>\n"
                        f"üóì {last_task.task_due or '–ë–µ–∑ —Å—Ä–æ–∫–∞'}",
                        parse_mode="HTML"
                    )
                else:
                    await message.answer(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É.\n"
                        "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –≤ Todoist."
                    )
        except BotError as e:
            logger.warning(f"Bot error deleting task: {e}")
            await message.answer(format_error_message(e))
        except Exception as e:
            logger.error(f"Unexpected error deleting task: {e}", exc_info=True)
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")


@command_router.message(Command("autodelete"))
async def handle_autodelete(
    message: Message,
    user: "User"
) -> None:
    """Toggle auto-delete previous task setting."""
    if not message.from_user:
        return

    user_id = message.from_user.id

    # Toggle the setting
    db = get_database()
    async with db.get_session() as session:
        user_repo = UserRepository(session)

        # Toggle auto_delete_previous setting
        user.auto_delete_previous = not user.auto_delete_previous
        await user_repo.update(user)

        status = "–≤–∫–ª—é—á–µ–Ω–æ ‚úÖ" if user.auto_delete_previous else "–≤—ã–∫–ª—é—á–µ–Ω–æ ‚ùå"

        await message.answer(
            f"üóë –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏ {status}\n\n"
            f"{'–¢–µ–ø–µ—Ä—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å—Å—è.' if user.auto_delete_previous else '–í—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è.'}"
        )


@command_router.message(Command("recent"))
async def handle_recent(
    message: Message,
    user: "User"
) -> None:
    """Handle /recent command - show recent tasks with action buttons."""
    if not message.from_user:
        return

    user_id = message.from_user.id
    logger.info(f"User {user_id} requested recent tasks")

    # Get recent tasks
    db = get_database()
    async with db.get_session() as session:
        task_repo = TaskRepository(session)
        recent_tasks = await task_repo.get_recent_tasks(user_id, limit=5)

        if not recent_tasks:
            await message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
            return

        # Format tasks list
        text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏:</b>\n\n"

        for i, task in enumerate(recent_tasks, 1):
            text += (
                f"{i}. <b>{task.task_content}</b>\n"
                f"   üóì {task.task_due or '–ë–µ–∑ —Å—Ä–æ–∫–∞'}\n"
                f"   üè∑ {task.task_labels or '–ë–µ–∑ –º–µ—Ç–æ–∫'}\n\n"
            )

        # Create inline keyboard with task management buttons
        from src.utils.formatters import create_recent_tasks_keyboard
        keyboard = create_recent_tasks_keyboard(recent_tasks)

        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )


@command_router.message(Command("cancel"))
async def handle_cancel(message: Message, state: FSMContext) -> None:
    """Cancel current operation."""
    current_state = await state.get_state()

    if current_state:
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã")
