"""Command handlers for the bot."""

import logging

from aiogram import Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message

from src.core.database import get_database
from src.repositories.user import UserRepository
from src.services.encryption import get_encryption_service

logger = logging.getLogger(__name__)

# Create router for commands
command_router = Router(name="commands")


class SetupStates(StatesGroup):
    """States for setup process."""

    waiting_for_token = State()


@command_router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """Handle /start command."""
    if not message.from_user:
        return
    
    # Create or update user in database
    async with get_database().get_session() as session:
        user_repo = UserRepository(session)
        await user_repo.create_or_update(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            language_code=message.from_user.language_code
        )
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–¥–∞—á–∏ Todoist.\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ –ò–∑–≤–ª–µ–∫–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç Todoist –∫–æ–º–∞–Ω–¥–æ–π /setup"
    )


@command_router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """Handle /help command."""
    await message.answer(
        "üìñ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:**\n\n"
        "1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Todoist: /setup\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π\n"
        "3. –ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –∑–∞–¥–∞—á—É –≤ Todoist\n\n"
        "**–ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:**\n"
        "‚Ä¢ –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∑–∞–≤—Ç—Ä–∞\n"
        "‚Ä¢ –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ –ø—è—Ç–Ω–∏—Ü—É –≤ 15:00\n"
        "‚Ä¢ –û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç–∞ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞ !–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/setup - –ü–æ–¥–∫–ª—é—á–∏—Ç—å Todoist\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é",
        parse_mode="Markdown"
    )


@command_router.message(Command("setup"))
async def cmd_setup(message: Message, state: FSMContext) -> None:
    """Handle /setup command - start token setup."""
    await state.set_state(SetupStates.waiting_for_token)
    
    await message.answer(
        "üîê **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Todoist**\n\n"
        "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à Personal API Token:\n\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ [Todoist Settings](https://app.todoist.com/app/settings/integrations/developer)\n"
        "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à API token\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n"
        "‚ö†Ô∏è –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ.\n"
        "–ù–∏–∫—Ç–æ –∫—Ä–æ–º–µ –≤–∞—Å –Ω–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø.",
        parse_mode="Markdown",
        disable_web_page_preview=True
    )


@command_router.message(SetupStates.waiting_for_token)
async def process_token(message: Message, state: FSMContext) -> None:
    """Process Todoist token."""
    if not message.text or not message.from_user:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —Ç–µ–∫—Å—Ç–æ–º.")
        return
    
    token = message.text.strip()
    
    # Basic validation
    if len(token) < 20 or len(token) > 100:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 40 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return
    
    # Delete message with token for security
    await message.delete()
    
    # Encrypt and save token
    try:
        encryption = get_encryption_service()
        encrypted_token = encryption.encrypt(token)
        
        async with get_database().get_session() as session:
            user_repo = UserRepository(session)
            success = await user_repo.update_todoist_token(
                user_id=message.from_user.id,
                encrypted_token=encrypted_token
            )
        
        if success:
            await message.answer(
                "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è, "
                "–∏ —è –±—É–¥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑ –Ω–∏—Ö –∑–∞–¥–∞—á–∏ –≤ Todoist."
            )
            await state.clear()
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"Failed to save token: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@command_router.message(Command("status"))
async def cmd_status(message: Message) -> None:
    """Check connection status."""
    if not message.from_user:
        return
    
    async with get_database().get_session() as session:
        user_repo = UserRepository(session)
        user = await user_repo.get_by_id(message.from_user.id)
    
    if not user or not user.todoist_token_encrypted:
        await message.answer(
            "‚ùå Todoist –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        )
    else:
        await message.answer(
            f"‚úÖ Todoist –ø–æ–¥–∫–ª—é—á–µ–Ω\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: {user.tasks_created}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞: {user.last_task_at.strftime('%d.%m.%Y %H:%M') if user.last_task_at else '–ù–µ—Ç'}"
        )


@command_router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext) -> None:
    """Cancel current operation."""
    current_state = await state.get_state()
    
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    else:
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")